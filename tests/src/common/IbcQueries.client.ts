/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin, StdFee } from "@cosmjs/amino";
import { SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { ExecuteMsg, QueryRequestForEmpty, BankQuery, StakingQuery, Binary, IbcQuery, WasmQuery, Empty, InstantiateMsg } from "./IbcQueries.types";
export interface IbcQueriesInterface {
  contractAddress: string;
  sender: string;
  ibcQuery: ({
    callback,
    channelId,
    msgs
  }: {
    callback: string;
    channelId: string;
    msgs: QueryRequestForEmpty[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class IbcQueriesClient implements IbcQueriesInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.ibcQuery = this.ibcQuery.bind(this);
  }

  ibcQuery = async ({
    callback,
    channelId,
    msgs
  }: {
    callback: string;
    channelId: string;
    msgs: QueryRequestForEmpty[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      ibc_query: {
        callback,
        channel_id: channelId,
        msgs
      }
    }, fee, memo, funds);
  };
}