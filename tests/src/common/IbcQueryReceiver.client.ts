/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { ExecuteMsg, Binary, Timestamp, Uint64, Addr, ReceiveIbcResponseMsg, IbcPacketAckMsg, IbcAcknowledgement, IbcPacket, IbcEndpoint, IbcTimeout, IbcTimeoutBlock, IbcQueryResultResponse, InstantiateMsg, QueryMsg } from "./IbcQueryReceiver.types";
export interface IbcQueryReceiverReadOnlyInterface {
  contractAddress: string;
  latestQueryResult: ({
    channelId
  }: {
    channelId: string;
  }) => Promise<LatestQueryResultResponse>;
}
export class IbcQueryReceiverQueryClient implements IbcQueryReceiverReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.latestQueryResult = this.latestQueryResult.bind(this);
  }

  latestQueryResult = async ({
    channelId
  }: {
    channelId: string;
  }): Promise<LatestQueryResultResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      latest_query_result: {
        channel_id: channelId
      }
    });
  };
}
export interface IbcQueryReceiverInterface extends IbcQueryReceiverReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receiveIbcResponse: ({
    msg
  }: {
    msg: IbcPacketAckMsg;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class IbcQueryReceiverClient extends IbcQueryReceiverQueryClient implements IbcQueryReceiverInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receiveIbcResponse = this.receiveIbcResponse.bind(this);
  }

  receiveIbcResponse = async ({
    msg
  }: {
    msg: IbcPacketAckMsg;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive_ibc_response: {
        msg
      }
    }, fee, memo, funds);
  };
}